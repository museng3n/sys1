# malware_protection.py - SMART Protection (No False Alarms)
import os
import time
import psutil

def check_for_threats():
    print("üîç Checking for threats...")
    
    # Only check for ACTUALLY dangerous process names
    dangerous_names = [
        'keylogger', 'keylog', 'stealer', 'steal', 'trojan', 
        'backdoor', 'ratserver', 'cryptominer', 'coinminer',
        'spyware', 'malware', 'virus', 'botnet', 'hijacker'
    ]
    
    # Legitimate Windows processes to IGNORE
    windows_processes = [
        'wmiregistrationservice', 'wmiprvse', 'svchost', 'winlogon',
        'csrss', 'explorer', 'dwm', 'antimalware service executable'
    ]
    
    threats_found = 0
    
    for proc in psutil.process_iter(['name']):
        try:
            proc_name = proc.info['name'].lower()
            
            # Skip legitimate Windows processes
            is_windows_process = any(windows_proc in proc_name for windows_proc in windows_processes)
            if is_windows_process:
                continue
            
            # Check for actual threats
            is_dangerous = any(dangerous in proc_name for dangerous in dangerous_names)
            if is_dangerous:
                print(f"üö® REAL THREAT: {proc.info['name']}")
                threats_found += 1
        except:
            continue
    
    # Check if critical files still exist
    critical_files = ['config.json.encrypted', 'secret.key', 'main.py']
    for file in critical_files:
        if not os.path.exists(file):
            print(f"‚ö†Ô∏è MISSING FILE: {file}")
            threats_found += 1
    
    if threats_found == 0:
        print("‚úÖ No threats detected")
        return True
    else:
        print(f"üö® {threats_found} threats detected!")
        return False

def monitor_system():
    print("üõ°Ô∏è Starting SMART malware protection...")
    print("(Ignoring legitimate Windows processes)")
    
    while True:
        if not check_for_threats():
            print("üö® REAL THREAT DETECTED! Stopping trading system...")
            os.system("taskkill /f /im python.exe")
            break
        
        time.sleep(60)  # Check every minute

if __name__ == "__main__":
    monitor_system()